package it.polimi.ingsw.bean.action;

import it.polimi.ingsw.controller.Operation;
import it.polimi.ingsw.exception.AlreadyOccupiedException;
import it.polimi.ingsw.exception.AlreadySetException;
import it.polimi.ingsw.exception.DomeAlreadyPresentException;
import it.polimi.ingsw.model.Player;

import java.util.Objects;

/**
 * Actions are messages generated by the client to make a change to the model,
 * such as moving a worker or building a block.
 * Action is a abstract class extended by many classes.
 */
public abstract class GameAction extends Action {

    /**
     * The player's instance who generate the action.
     * It's set by ActionHandler when the action arrived in the GameController
     *
     * @see ActionHandler
     */
    protected transient Player player;

    /**
     * Default constructor
     *
     * @param nickname The player's nickname who generate the action
     */
    public GameAction(String nickname) {
        super(nickname);
    }

    public Player getPlayer() {
        return player;
    }

    /**
     * Method used only by ActionHandler.
     *
     * @param player The player's instance who generate the action.
     * @see Player
     */
    void setPlayer(Player player) {
        this.player = player;
    }

    /**
     * Method used by GameController to decide if action arrived is compatible with the current operation of turn
     *
     * @param operation It's the current operation in Turn
     * @return True if the operation passed like parameter is compatible with the action
     * @see Operation
     */
    public abstract Boolean isCompatible(Operation operation);

    /**
     * It is the most important method of the gameAction,
     * it is overwritten in every sub-class to be able to execute the action in a dynamic way
     * without the controller knowing what type of action it is.
     *
     * @throws AlreadyOccupiedException    if the action is trying to perform an operation on an occupied Tile
     * @throws DomeAlreadyPresentException if the action is trying to build on a tile with a dome on it
     * @throws AlreadySetException         if the action is trying to assign workers to a player that already has them
     */
    abstract void execute() throws AlreadyOccupiedException, DomeAlreadyPresentException, AlreadySetException;

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof GameAction)) return false;
        if (this.player != null && ((GameAction) obj).getPlayer() != null && !this.player.equals(((GameAction) obj).getPlayer()))
            return false;
        return super.equals(obj);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nickname, player);
    }
}